<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.itwillbs.mapper.ProductMapper">

	

	<!-- 상품 리스트 -->
	<resultMap type="ProductVO" id="ProductVO">
		<id column="product_num" property="product_num" />
		<id column="product_seller" property="product_seller" />
		<id column="product_cate" property="product_cate" />
		<id column="product_title" property="product_title" />
		<id column="product_content" property="product_content" />
		<id column="product_price" property="product_price" />
		<id column="product_grade" property="product_grade" />
		<id column="product_pic" property="product_pic" />
		<id column="product_readcount" property="product_readcount" />
		<id column="product_date" property="product_date" />
		<id column="product_favorite" property="product_favorite" />
		<id column="product_status" property="product_status" />
	</resultMap>
	
	
	<select id="getProdList" parameterType="map" resultType="ProductVO">
		SELECT * FROM PRODUCT
		<where>
			PRODUCT_STATUS = 0
	        <if test="grade != null">
	            AND PRODUCT_GRADE LIKE CONCAT('%', #{grade}, '%')
	        </if>
	        <if test="category != null">
	            AND PRODUCT_CATE LIKE CONCAT('%', #{category}, '%')
	        </if>
	        <if test="title != null">
	            AND PRODUCT_TITLE LIKE CONCAT('%', #{title}, '%')
	        </if>
	    </where>
		<choose>
	        <when test="sortBy == 'price_asc'">
	            ORDER BY PRODUCT_PRICE ASC
	        </when>
	        <when test="sortBy == 'price_desc'">
	            ORDER BY PRODUCT_PRICE DESC
	        </when>
	        <when test="sortBy == 'date_asc'">
	            ORDER BY PRODUCT_DATE ASC
	        </when>
	        <when test="sortBy == 'date_desc'">
	            ORDER BY PRODUCT_DATE DESC
	        </when>
	        <otherwise>
	            ORDER BY PRODUCT_NUM ASC
	        </otherwise>
    	</choose>
	</select>
	<!-- 상품 리스트 -->

	<!-- 상품 리스트 페이지 -->
	<select id="getProdListPage" parameterType="map" resultType="ProductVO">
		SELECT * FROM PRODUCT
		<where>
			PRODUCT_STATUS = 0
	        <if test="grade != null and grade != ''">
	            AND PRODUCT_GRADE LIKE CONCAT('%', #{grade}, '%')
	        </if>
	        <if test="category != null and category != ''">
	            AND PRODUCT_CATE LIKE CONCAT('%', #{category}, '%')
	        </if>
	        <if test="title != null and title != ''">
	            AND PRODUCT_TITLE LIKE CONCAT('%', #{title}, '%')
	        </if>
	        <if test="min != null">
	        	and product_price <![CDATA[ >= ]]> #{min}
	        </if>
	        <if test="max != null">
	        	and product_price <![CDATA[ <= ]]> #{max}
	        </if>
	    </where>
		<choose>
	        <when test="sortBy == 'price_asc'">
	            ORDER BY PRODUCT_PRICE ASC
	        </when>
	        <when test="sortBy == 'price_desc'">
	            ORDER BY PRODUCT_PRICE DESC
	        </when>
	        <when test="sortBy == 'date_asc'">
	            ORDER BY PRODUCT_DATE ASC
	        </when>
	        <when test="sortBy == 'date_desc'">
	            ORDER BY PRODUCT_DATE DESC
	        </when>
	        <otherwise>
	            ORDER BY PRODUCT_NUM ASC
	        </otherwise>
    	</choose>
    	limit #{pageSize} offset #{startPage}
	</select>
	<!-- 상품 리스트 페이지 -->
	
	<!-- 찜하기 -->
	<update id="likeProd">
		UPDATE PRODUCT SET PRODUCT_FAVORITE = PRODUCT_FAVORITE + 1
		WHERE PRODUCT_NUM = #{product_num}
	</update>
	<!-- 찜하기 -->
	
	<!-- 찜취소 -->
	<update id="likeProdCancel">
		UPDATE PRODUCT SET PRODUCT_FAVORITE = PRODUCT_FAVORITE - 1
		WHERE PRODUCT_NUM = #{product_num}
	</update>
	<!-- 찜취소 -->
	
	<!-- 회원이 찜목록에 있는지 판단 -->
	<select id="likeExist" resultType="Integer">
		select count(member_id) from favorite
		where member_id = #{id}
		and product_num = #{pnum}
	</select>
	<!-- 회원이 찜목록에 있는지 판단 -->
	
	<!-- 회원 찜 -->
	<insert id="regFav">
		insert into favorite
		values (#{pnum}, #{id})
	</insert>
	<!-- 회원 찜 -->
	
	<!-- 회원 찜 취소 -->
	<delete id="delFav">
		delete from favorite
		where product_num = #{pnum}
		and member_id = #{id}
	</delete>
	<!-- 회원 찜 취소 -->
	
	<!-- 상품 세부정보 -->
	<select id="getProdInfo" resultType="hashMap">
		select p.*, m.*
		from product p join member m
		on p.product_seller = m.member_id
		where product_num = #{product_num};
	</select>
	<!-- 상품 세부정보 -->
	
	<!-- 같은 카테고리의 상품 추천 -->
	<select id="recProd" resultType="ProductVO">
		SELECT * FROM
						(SELECT *
						FROM PRODUCT
						WHERE PRODUCT_CATE = #{PRODUCT_CATE} and product_status = 0
						ORDER BY PRODUCT_FAVORITE DESC, PRODUCT_READCOUNT DESC
						LIMIT 30) AS TOP
		ORDER BY RAND()
		LIMIT 8
	</select>
	<!-- 같은 카테고리의 상품 추천 -->
	
	<!-- 판매자 온도 -->
	<select id="getScore" resultType="double">
		SELECT IFNULL(
        (SELECT AVG(RV_SCORE)
         FROM REVIEW
         WHERE REVIEWEE = #{reviewee}
         GROUP BY REVIEWEE),
    2.5)
	</select>
	<!-- 판매자 온도 -->
	
	<!-- 조회수 증가 -->
	<update id="viewInc">
		update product set product_readcount = product_readcount + 1
		where product_num = #{product_num}
	</update>
	
	<!-- 상품 등록 -->
	<insert id="regProd">
		INSERT INTO PRODUCT(product_seller, product_cate, product_title
		, product_content, product_price, product_grade, product_pic) 
		VALUES(#{product_seller}, #{product_cate}, #{product_title}, #{product_content}, #{product_price}
		, #{product_grade}, #{product_pic})
	</insert>
	<!-- 상품 등록 -->
	
	<!-- 상품 등록할때 번호 알아내기 -->
	<select id="lastProdNum" resultType="int">
		select product_num from product where product_seller = #{product_seller} order by product_num desc limit 1;
	</select>
	<!-- 상품 등록할때 번호 알아내기 -->
	
	<!-- 게시물 전체 숫자 -->
	<select id="getTotalCount" resultType="int">
		select count(product_num) from product
	</select>
	
	<!-- 상품 정보 수정 -->
	<update id="updateProd">
		update product set product_title = #{product_title}, product_content = #{product_content},
		product_price = #{product_price}, product_grade = #{product_grade} where product_num = #{product_num}
	</update>
	<!-- 상품 정보 수정 -->
	
	<!-- 상품 정보 삭제 -->
	<delete id="deleteProd">
		delete from product where product_num = #{pnum}
	</delete>
	<!-- 상품 정보 삭제 -->
	
	<!-- 찜 - 상위 카테고리 가져오기 -->
	<select id="getFavProdCate" resultType="string">
		WITH c AS (
		  SELECT product_cate, COUNT(product_cate) AS count
		  FROM product 
		  WHERE product_num IN (SELECT product_num FROM favorite WHERE member_id = #{member_id}) and product_status = 0
		  GROUP BY product_cate
		)
		SELECT product_cate
		FROM c
		WHERE count = (SELECT MAX(count) FROM c)
		ORDER BY RAND()
		LIMIT 1
	</select>
	<!-- 찜 - 상위 카테고리 가져오기 -->
	
	<!-- 찜 - 좋아요 기반 추천 목록 가져오기  -->
	<select id="getFavProdLike" resultType="productVO">
		SELECT * FROM (
				    	SELECT * FROM product where product_status = 0 ORDER BY product_favorite DESC LIMIT 20
		) p ORDER BY RAND() LIMIT 8
	</select>
	<!-- 찜 - 좋아요 기반 추천 목록 가져오기  -->
	
	<!-- 찜 - 등록일자 대비 조회수 기반 추천 목록 가져오기 -->
	<select id="getFavProdInterest" resultType="productVO">
		SELECT *
		FROM (
			SELECT *
			FROM product
			where product_status = 0
			ORDER BY (product_readcount / CASE WHEN TIMESTAMPDIFF(DAY, product_date, NOW()) = 0 THEN 1 ELSE TIMESTAMPDIFF(DAY, product_date, NOW()) END) DESC
			LIMIT 20
		) AS sub
		ORDER BY RAND()
		LIMIT 8
	</select>
	<!-- 찜 - 등록일자 대비 조회수 기반 추천 목록 가져오기 -->
	
</mapper>


